name: Release Please

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

  pull_request:
    branches:
      - main
      - 2.4
      - 2.3
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
      branch:
        description: 'Target branch'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - 2.4
          - 2.3

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-pr-title:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR Title for Conventional Commits
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            echo "🔍 Checking PR title: $PR_TITLE"
            CHECK_MSG="$PR_TITLE"
          else
            COMMIT_MSG=$(git log -1 --pretty=format:'%s')
            echo "🔍 Checking commit: $COMMIT_MSG"
            CHECK_MSG="$COMMIT_MSG"
          fi
          
          if echo "$CHECK_MSG" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|optimize)(\(.+\))?: .+'; then
            echo "✅ Title/Commit follows conventional format"
          else
            echo "❌ Title/Commit does not follow conventional format"
            echo "Expected format: type(scope): description"
            echo "Valid types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, optimize"
            exit 1
          fi

  create-draft:
    if: github.event_name == 'push'
    needs: validate-pr-title
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get Latest Tag and Calculate Draft Version
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | grep -v "draft" | head -1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "📌 Latest release tag: $LATEST_TAG"
          
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          HAS_FEAT=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^feat" | wc -l)
          HAS_BREAKING=$(git log ${LATEST_TAG}..HEAD --oneline --grep="BREAKING CHANGE\|!" | wc -l)
          
          if [ "$HAS_BREAKING" -gt 0 ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$HAS_FEAT" -gt 0 ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          DRAFT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "draft_version=$DRAFT_VERSION" >> $GITHUB_OUTPUT
          echo "🔄 Draft version: $DRAFT_VERSION"

      - name: Update Draft Release and CHANGELOG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          DRAFT_VERSION="${{ steps.latest_tag.outputs.draft_version }}"
          DRAFT_TAG="${DRAFT_VERSION}-draft"
          
          echo "🔄 Updating draft release: $DRAFT_TAG"
          
          echo "🧹 Cleaning up old draft tags..."
          git tag -l | grep -E "(draft|DRAFT)" | while read tag; do
            if [ "$tag" != "$DRAFT_TAG" ]; then
              echo "Deleting old draft tag: $tag"
              git tag -d "$tag" 2>/dev/null || true
              git push origin :refs/tags/"$tag" 2>/dev/null || true
            fi
          done
          
          generate_changelog() {
            local VERSION=$1
            local LATEST_TAG=$2
            local OUTPUT_FILE=$3
          
            echo "## $VERSION ($(date +%Y-%m-%d))" > $OUTPUT_FILE
            echo "" >> $OUTPUT_FILE
          
            if [ "$LATEST_TAG" != "v1.0.0" ]; then
              FEATURES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^feat")
              FIXES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^fix")
              TESTS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^test")
              OPTIMIZES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^optimize")
              OTHERS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^docs\|^style\|^refactor\|^chore\|^perf\|^ci\|^build")
            else
              FEATURES=$(git log HEAD --oneline --grep="^feat")
              FIXES=$(git log HEAD --oneline --grep="^fix")
              TESTS=$(git log HEAD --oneline --grep="^test")
              OPTIMIZES=$(git log HEAD --oneline --grep="^optimize")
              OTHERS=$(git log HEAD --oneline --grep="^docs\|^style\|^refactor\|^chore\|^perf\|^ci\|^build")
            fi
          
            if [ ! -z "$FEATURES" ]; then
              echo "### 🚀 Features" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^feat[(:][^)]*[)]:\s*//' | sed 's/^feat:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$FEATURES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$FIXES" ]; then
              echo "### 🐛 Bug Fixes" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^fix[(:][^)]*[)]:\s*//' | sed 's/^fix:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$FIXES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$TESTS" ]; then
              echo "### 🧪 Tests" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^test[(:][^)]*[)]:\s*//' | sed 's/^test:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$TESTS"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$OPTIMIZES" ]; then
              echo "### ✨ Optimizations" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^optimize[(:][^)]*[)]:\s*//' | sed 's/^optimize:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$OPTIMIZES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$OTHERS" ]; then
              echo "### 🔧 Other Changes" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed -E 's/^(docs|style|refactor|chore|perf|ci|build)[(:][^)]*[)]:\s*//' | sed -E 's/^(docs|style|refactor|chore|perf|ci|build):\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$OTHERS"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ -z "$FEATURES" ] && [ -z "$FIXES" ] && [ -z "$TESTS" ] && [ -z "$OPTIMIZES" ] && [ -z "$OTHERS" ]; then
              echo "No new changes since last release." >> $OUTPUT_FILE
            fi
            
            # 添加 Contributors 部分
            echo "### 🙏 Contributors" >> $OUTPUT_FILE
            echo "" >> $OUTPUT_FILE
            CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --format='%an <%ae>' | sort -u | grep -v 'github-actions')
            if [ ! -z "$CONTRIBUTORS" ]; then
              echo "We'd like to thank the following contributors for this release:" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              

              # 使用紧凑的头像展示格式（类似release-drafter）
              while IFS= read -r contributor; do
                AUTHOR_NAME=$(echo "$contributor" | sed 's/ <.*//')
                AUTHOR_EMAIL=$(echo "$contributor" | sed 's/.*<\(.*\)>/\1/')
                
                # 尝试多种方式获取GitHub用户名
                GITHUB_USER=""
                if [[ "$AUTHOR_EMAIL" == *"@users.noreply.github.com" ]]; then
                  # GitHub noreply邮箱格式
                  GITHUB_USER=$(echo "$AUTHOR_EMAIL" | sed 's/.*+\(.*\)@users.noreply.github.com/\1/')
                elif [[ "$AUTHOR_EMAIL" == *"github.com" ]]; then
                  # 其他GitHub邮箱格式
                  GITHUB_USER=$(echo "$AUTHOR_EMAIL" | sed 's/@.*//')
                else
                  # 尝试通过git config获取GitHub用户名，或使用预定义映射
                  case "$AUTHOR_EMAIL" in
                    "iwongjian666@gmail.com")
                      GITHUB_USER="WangzJi"
                      ;;
                    *)
                      # 使用作者姓名作为GitHub用户名的猜测
                      GITHUB_USER=$(echo "$AUTHOR_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
                      ;;
                  esac

                fi
                
                # 生成紧凑的头像链接
                if [ ! -z "$GITHUB_USER" ]; then
                  echo "<a href=\"https://github.com/$GITHUB_USER\"><img src=\"https://github.com/$GITHUB_USER.png?size=40\" width=\"40\" height=\"40\" alt=\"@$GITHUB_USER\" title=\"@$GITHUB_USER\" style=\"border-radius: 50%; margin-right: 8px;\"/></a>" >> $OUTPUT_FILE
                else
                  echo "<img src=\"https://github.com/identicons/$(echo -n "$AUTHOR_EMAIL" | md5sum | cut -d' ' -f1).png\" width=\"40\" height=\"40\" alt=\"$AUTHOR_NAME\" title=\"$AUTHOR_NAME\" style=\"border-radius: 50%; margin-right: 8px;\"/>" >> $OUTPUT_FILE
                fi
              done <<< "$CONTRIBUTORS"
            else
              echo "* github-actions[bot]" >> $OUTPUT_FILE
            fi
            echo "" >> $OUTPUT_FILE
            echo "Your contributions are greatly appreciated! 🎉" >> $OUTPUT_FILE
          }
          
          CHANGELOG_FILE="/tmp/changelog.md"
          generate_changelog "$DRAFT_VERSION" "$LATEST_TAG" "$CHANGELOG_FILE"
          
          if gh api repos/${{ github.repository }}/releases/tags/$DRAFT_TAG >/dev/null 2>&1; then
            echo "🗑️ Deleting existing draft release..."
            gh api --method DELETE repos/${{ github.repository }}/releases/tags/$DRAFT_TAG || true
            git push --delete origin $DRAFT_TAG || true
            git tag -d $DRAFT_TAG || true
          fi
          
          echo "📝 Creating new draft release: $DRAFT_TAG"
          gh api repos/${{ github.repository }}/releases \
            -f tag_name="$DRAFT_TAG" \
            -f name="$DRAFT_VERSION (Draft)" \
            -F body="$(cat $CHANGELOG_FILE)" \
            -F draft=true \
            -f target_commitish="main"
          
          echo "📝 Updating CHANGELOG.md..."
          NEW_CHANGELOG_FILE="/tmp/new_changelog.md"
          echo "# Changelog" > $NEW_CHANGELOG_FILE
          echo "" >> $NEW_CHANGELOG_FILE
          cat $CHANGELOG_FILE >> $NEW_CHANGELOG_FILE
          echo "" >> $NEW_CHANGELOG_FILE
          
          if [ -f "CHANGELOG.md" ]; then
            tail -n +3 CHANGELOG.md >> $NEW_CHANGELOG_FILE
          fi
          
          mv $NEW_CHANGELOG_FILE CHANGELOG.md
          
          if ! git diff --quiet CHANGELOG.md; then
            echo "📝 Committing updated CHANGELOG.md..."
            git add CHANGELOG.md
            git commit -m "chore: update CHANGELOG.md for $DRAFT_VERSION draft"
            git push origin main
          else
            echo "📝 CHANGELOG.md is already up to date"
          fi
          
          echo "✅ Draft release updated: $DRAFT_TAG"

  manual-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Calculate New Version
        id: version_calc
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "📌 Latest tag: $LATEST_TAG"
          
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.release_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "🚀 New version will be: $NEW_VERSION"

      - name: Generate Changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.version_calc.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.version_calc.outputs.new_version }}"
          
          echo "📋 Generating changelog from $LATEST_TAG to HEAD"
          
          generate_changelog() {
            local VERSION=$1
            local LATEST_TAG=$2
            local OUTPUT_FILE=$3
            local IS_RELEASE=$4
          
            if [ "$IS_RELEASE" = "true" ]; then
              echo "## [$VERSION](https://github.com/${{ github.repository }}/releases/tag/$VERSION) ($(date +%Y-%m-%d))" > $OUTPUT_FILE
            else
              echo "## $VERSION ($(date +%Y-%m-%d))" > $OUTPUT_FILE
            fi
            echo "" >> $OUTPUT_FILE
          
            FEATURES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^feat")
            FIXES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^fix")
            TESTS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^test")
            OPTIMIZES=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^optimize")
            OTHERS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="^docs\|^style\|^refactor\|^chore\|^perf\|^ci\|^build")
          
            if [ ! -z "$FEATURES" ]; then
              echo "### 🚀 Features" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^feat[(:][^)]*[)]:\s*//' | sed 's/^feat:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$FEATURES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$FIXES" ]; then
              echo "### 🐛 Bug Fixes" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^fix[(:][^)]*[)]:\s*//' | sed 's/^fix:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$FIXES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$TESTS" ]; then
              echo "### 🧪 Tests" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^test[(:][^)]*[)]:\s*//' | sed 's/^test:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$TESTS"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$OPTIMIZES" ]; then
              echo "### ✨ Optimizations" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^optimize[(:][^)]*[)]:\s*//' | sed 's/^optimize:\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$OPTIMIZES"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ ! -z "$OTHERS" ]; then
              echo "### 🔧 Other Changes" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              while IFS= read -r commit; do
                COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
                COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed -E 's/^(docs|style|refactor|chore|perf|ci|build)[(:][^)]*[)]:\s*//' | sed -E 's/^(docs|style|refactor|chore|perf|ci|build):\s*//')
                echo "* $CLEAN_MSG ([$COMMIT_HASH](https://github.com/${{ github.repository }}/commit/$COMMIT_HASH))" >> $OUTPUT_FILE
              done <<< "$OTHERS"
              echo "" >> $OUTPUT_FILE
            fi
          
            if [ -z "$FEATURES" ] && [ -z "$FIXES" ] && [ -z "$TESTS" ] && [ -z "$OPTIMIZES" ] && [ -z "$OTHERS" ]; then
              echo "No new changes since last release." >> $OUTPUT_FILE
            fi
          }
          
          CHANGELOG_FILE="/tmp/changelog.md"
          generate_changelog "$NEW_VERSION" "$LATEST_TAG" "$CHANGELOG_FILE" "true"
          
          echo "📝 Adding contributors section..."
          CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --format='%an <%ae>' | sort -u | grep -v 'github-actions')
          
          if [ ! -z "$CONTRIBUTORS" ]; then
            echo "" >> "$CHANGELOG_FILE"
            echo "### 🙏 Contributors" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "We'd like to thank the following contributors for this release:" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            
            # 使用紧凑的头像展示格式（类似release-drafter）
            while IFS= read -r contributor; do
              AUTHOR_NAME=$(echo "$contributor" | sed 's/ <.*//')
              AUTHOR_EMAIL=$(echo "$contributor" | sed 's/.*<\(.*\)>/\1/')
              
              # 尝试多种方式获取GitHub用户名
              GITHUB_USER=""
              if [[ "$AUTHOR_EMAIL" == *"@users.noreply.github.com" ]]; then
                # GitHub noreply邮箱格式
                GITHUB_USER=$(echo "$AUTHOR_EMAIL" | sed 's/.*+\(.*\)@users.noreply.github.com/\1/')
              elif [[ "$AUTHOR_EMAIL" == *"github.com" ]]; then
                # 其他GitHub邮箱格式
                GITHUB_USER=$(echo "$AUTHOR_EMAIL" | sed 's/@.*//')
              else
                # 尝试通过git config获取GitHub用户名，或使用预定义映射
                case "$AUTHOR_EMAIL" in
                  "iwongjian666@gmail.com")
                    GITHUB_USER="WangzJi"
                    ;;
                  *)
                    # 使用作者姓名作为GitHub用户名的猜测
                    GITHUB_USER=$(echo "$AUTHOR_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
                    ;;
                esac

              fi
              
              # 生成紧凑的头像链接
              if [ ! -z "$GITHUB_USER" ]; then
                echo "<a href=\"https://github.com/$GITHUB_USER\"><img src=\"https://github.com/$GITHUB_USER.png?size=40\" width=\"40\" height=\"40\" alt=\"@$GITHUB_USER\" title=\"@$GITHUB_USER\" style=\"border-radius: 50%; margin-right: 8px;\"/></a>" >> "$CHANGELOG_FILE"
              else
                echo "<img src=\"https://github.com/identicons/$(echo -n "$AUTHOR_EMAIL" | md5sum | cut -d' ' -f1).png\" width=\"40\" height=\"40\" alt=\"$AUTHOR_NAME\" title=\"$AUTHOR_NAME\" style=\"border-radius: 50%; margin-right: 8px;\"/>" >> "$CHANGELOG_FILE"
              fi
            done <<< "$CONTRIBUTORS"
            echo "" >> "$CHANGELOG_FILE"
            echo "Your contributions are greatly appreciated! 🎉" >> "$CHANGELOG_FILE"
          fi
          
          echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version_calc.outputs.new_version }}"
          BRANCH="${{ github.event.inputs.branch }}"
          CHANGELOG_FILE="${{ steps.changelog.outputs.changelog_file }}"
          
          echo "🚀 Creating release: $NEW_VERSION on branch: $BRANCH"
          
          LATEST_TAG="${{ steps.version_calc.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          CURRENT_DRAFT_MINOR=$((VERSION_PARTS[1] + 1))
          CURRENT_DRAFT_TAG="v${VERSION_PARTS[0]}.${CURRENT_DRAFT_MINOR}.0-draft"
          
          if gh api repos/${{ github.repository }}/releases/tags/$CURRENT_DRAFT_TAG >/dev/null 2>&1; then
            echo "🗑️ Cleaning up current draft release: $CURRENT_DRAFT_TAG"
            gh api --method DELETE repos/${{ github.repository }}/releases/tags/$CURRENT_DRAFT_TAG || true
            git push --delete origin $CURRENT_DRAFT_TAG || true
          fi
          
          git tag $NEW_VERSION HEAD
          git push origin $NEW_VERSION
          
          if [ "$BRANCH" = "2.3" ]; then
            gh release create $NEW_VERSION \
              --title "$NEW_VERSION" \
              --notes-file "$CHANGELOG_FILE" \
              --target "$BRANCH"
          elif [ "$BRANCH" = "2.4" ]; then
            gh release create $NEW_VERSION \
              --title "$NEW_VERSION (Pre-release)" \
              --notes-file "$CHANGELOG_FILE" \
              --prerelease \
              --target "$BRANCH"
          else
            gh release create $NEW_VERSION \
              --title "$NEW_VERSION (Draft)" \
              --notes-file "$CHANGELOG_FILE" \
              --draft \
              --target "$BRANCH"
          fi
          
          echo "✅ Release $NEW_VERSION created successfully!"

      - name: Update Version Files and CHANGELOG
        if: github.event.inputs.branch == 'main'
        run: |
          NEW_VERSION="${{ steps.version_calc.outputs.new_version }}"
          LATEST_TAG="${{ steps.version_calc.outputs.latest_tag }}"
          VERSION_NUMBER=${NEW_VERSION#v}
          
          echo "📝 Updating version files and CHANGELOG.md"
          echo "$VERSION_NUMBER" > version.txt
          echo "{\".\": \"$VERSION_NUMBER\"}" > .release-please-manifest.json
          
          CHANGELOG_FILE="${{ steps.changelog.outputs.changelog_file }}"
          DRAFT_VERSION_MINOR=$(($(echo $LATEST_TAG | sed 's/v[0-9]*\.\([0-9]*\)\.[0-9]*/\1/') + 1))
          DRAFT_VERSION="v$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.[0-9]*\.[0-9]*/\1/').$DRAFT_VERSION_MINOR.0"
          
          if grep -q "## \[$DRAFT_VERSION\]" CHANGELOG.md; then
            echo "🗑️ Removing draft entry from CHANGELOG.md"
            sed -i.bak "/^## \[$DRAFT_VERSION\]/,/^## \[/{ /^## \[/!d; }" CHANGELOG.md
            sed -i.bak "/^## \[$DRAFT_VERSION\]/d" CHANGELOG.md
          fi
          
          {
            head -2 CHANGELOG.md
            echo ""
            cat $CHANGELOG_FILE
            echo ""
            tail -n +3 CHANGELOG.md
          } > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add version.txt .release-please-manifest.json CHANGELOG.md
          git commit -m "chore: release $NEW_VERSION" || true
          git push origin main || true
          
          echo "✅ Version files and CHANGELOG.md updated successfully"